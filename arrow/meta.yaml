{% set name = "arrow" %}
{% set version = "0.12.0" %}
{% set hash_type = "sha256" %}
{% set hash_value = "a15ecfddf334316e3ac8695e48c15d1be0d6038603b33043930dcf0e675c86ee" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install  --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
    - python-dateutil
#    - backports.functools_lru_cache ==1.2.1
  run:
    - python
    - python-dateutil
#    - backports.functools_lru_cache ==1.2.1

test:
  imports:
    - arrow

about:
  home: https://github.com/crsmithdev/arrow/
  license: Apache Software License
  license_family: APACHE
  license_file: ''
  summary: Better dates and times for Python
  description: "Arrow - Better dates & times for Python\n=======================================\n\n.. image:: https://travis-ci.org/crsmithdev/arrow.svg\n   :alt: build status\n   :target: https://travis-ci.org/crsmithdev/arrow\n\
    \n.. image:: https://codecov.io/github/crsmithdev/arrow/coverage.svg?branch=master\n   :target: https://codecov.io/github/crsmithdev/arrow\n   :alt: Codecov\n\n.. image:: https://img.shields.io/pypi/v/arrow.svg\n\
    \   :target: https://pypi.python.org/pypi/arrow\n   :alt: downloads\n        \nDocumentation: `arrow.readthedocs.org <http://arrow.readthedocs.org/en/latest/>`_\n---------------------------------------------------------------------------------\n\
    \nWhat?\n-----\n\nArrow is a Python library that offers a sensible, human-friendly approach to creating, manipulating, formatting and converting dates, times, and timestamps.  It implements and updates\
    \ the datetime type, plugging gaps in functionality, and provides an intelligent module API that supports many common creation scenarios.  Simply put, it helps you work with dates and times with fewer\
    \ imports and a lot less code.\n\nArrow is heavily inspired by `moment.js <https://github.com/timrwood/moment>`_ and `requests <https://github.com/kennethreitz/requests>`_\n\nWhy?\n----\n\nPython's\
    \ standard library and some other low-level modules have near-complete date, time and time zone functionality but don't work very well from a usability perspective:\n\n- Too many modules:  datetime,\
    \ time, calendar, dateutil, pytz and more\n- Too many types:  date, time, datetime, tzinfo, timedelta, relativedelta, etc.\n- Time zones and timestamp conversions are verbose and unpleasant \n- Time\
    \ zone naievety is the norm\n- Gaps in functionality:  ISO-8601 parsing, timespans, humanization\n\nFeatures \n--------\n\n- Fully implemented, drop-in replacement for datetime \n- Supports Python 2.6,\
    \ 2.7, 3.3, 3.4 and 3.5\n- Time zone-aware & UTC by default\n- Provides super-simple creation options for many common input scenarios\n- Updated .replace method with support for relative offsets, including\
    \ weeks\n- Formats and parses strings automatically\n- Partial support for ISO-8601\n- Timezone conversion\n- Timestamp available as a property\n- Generates time spans, ranges, floors and ceilings in\
    \ timeframes from year to microsecond\n- Humanizes and supports a growing list of contributed locales\n- Extensible for your own Arrow-derived types\n\nQuick start\n-----------\n\nFirst:\n\n.. code-block::\
    \ console\n\n    $ pip install arrow\n\nAnd then:\n\n.. code-block:: pycon\n\n    >>> import arrow\n    >>> utc = arrow.utcnow()\n    >>> utc\n    <Arrow [2013-05-11T21:23:58.970460+00:00]>\n\n    >>>\
    \ utc = utc.replace(hours=-1)\n    >>> utc\n    <Arrow [2013-05-11T20:23:58.970460+00:00]>\n\n    >>> local = utc.to('US/Pacific')\n    >>> local\n    <Arrow [2013-05-11T13:23:58.970460-07:00]>\n\n\
    \    >>> arrow.get('2013-05-11T21:23:58.970460+00:00')\n    <Arrow [2013-05-11T21:23:58.970460+00:00]>\n\n    >>> local.timestamp\n    1368303838\n\n    >>> local.format()\n    '2013-05-11 13:23:58\
    \ -07:00'\n\n    >>> local.format('YYYY-MM-DD HH:mm:ss ZZ')\n    '2013-05-11 13:23:58 -07:00'\n\n    >>> local.humanize()\n    'an hour ago'\n\n    >>> local.humanize(locale='ko_kr')\n    '1\uC2DC\uAC04\
    \ \uC804'\n    \nFurther documentation can be found at `arrow.readthedocs.org <http://arrow.readthedocs.org/en/latest/>`_\n\nContributing\n------------\n\nContributions are welcome, especially with\
    \ localization.  See `locales.py <https://github.com/crsmithdev/arrow/blob/master/arrow/locales.py>`_ for what's currently supported.\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
