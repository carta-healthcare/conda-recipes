{% set name = "pluggy" %}
{% set version = "0.5.2" %}
{% set hash_type = "sha256" %}
{% set hash_value = "bd60171dbb250fdebafad46ed16d97065369da40568ae948ef7117eee8536e94" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install  --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python

test:
  imports:
    - pluggy

about:
  home: https://github.com/pytest-dev/pluggy
  license: MIT License
  license_family: MIT
  license_file: ''
  summary: plugin and hook calling mechanisms for python
  description: "pluggy - A minimalist production ready plugin system\n====================================================\n|pypi| |anaconda| |versions| |travis| |appveyor|\n\n\nThis is the core framework\
    \ used by the `pytest`_, `tox`_, and `devpi`_ projects.\n\nPlease `read the docs`_ to learn more!\n\nA definitive example\n********************\n.. code-block:: python\n\n    import pluggy\n\n    hookspec\
    \ = pluggy.HookspecMarker(\"myproject\")\n    hookimpl = pluggy.HookimplMarker(\"myproject\")\n\n\n    class MySpec(object):\n        \"\"\"A hook specification namespace.\n        \"\"\"\n        @hookspec\n\
    \        def myhook(self, arg1, arg2):\n            \"\"\"My special little hook that you can customize.\n            \"\"\"\n\n\n    class Plugin_1(object):\n        \"\"\"A hook implementation namespace.\n\
    \        \"\"\"\n        @hookimpl\n        def myhook(self, arg1, arg2):\n            print(\"inside Plugin_1.myhook()\")\n            return arg1 + arg2\n\n\n    class Plugin_2(object):\n        \"\
    \"\"A 2nd hook implementation namespace.\n        \"\"\"\n        @hookimpl\n        def myhook(self, arg1, arg2):\n            print(\"inside Plugin_2.myhook()\")\n            return arg1 - arg2\n\n\
    \n    # create a manager and add the spec\n    pm = pluggy.PluginManager(\"myproject\")\n    pm.add_hookspecs(MySpec)\n\n    # register plugins\n    pm.register(Plugin_1())\n    pm.register(Plugin_2())\n\
    \n    # call our `myhook` hook\n    results = pm.hook.myhook(arg1=1, arg2=2)\n    print(results)\n\n\n.. badges\n.. |pypi| image:: https://img.shields.io/pypi/v/pluggy.svg\n    :target: https://pypi.python.org/pypi/pluggy\n\
    .. |versions| image:: https://img.shields.io/pypi/pyversions/pluggy.svg\n    :target: https://pypi.python.org/pypi/pluggy\n.. |travis| image:: https://img.shields.io/travis/pytest-dev/pluggy/master.svg\n\
    \    :target: https://travis-ci.org/pytest-dev/pluggy\n.. |appveyor| image:: https://img.shields.io/appveyor/ci/pytestbot/pluggy/master.svg\n    :target: https://ci.appveyor.com/project/pytestbot/pluggy\n\
    .. |anaconda| image:: https://anaconda.org/conda-forge/pluggy/badges/version.svg\n    :target: https://anaconda.org/conda-forge/pluggy\n\n.. links\n.. _pytest:\n    http://pytest.org\n.. _tox:\n   \
    \ https://tox.readthedocs.org\n.. _devpi:\n    http://doc.devpi.net\n.. _read the docs:\n   https://pluggy.readthedocs.io/en/latest/"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
