package:
  name: oauthlib
  version: "1.1.1"

source:
  fn: oauthlib-1.1.1.tar.gz
  url: https://pypi.python.org/packages/79/56/cb4c1ff3244f68605a1042a7f257f96815246b0625e28991d268554adb16/oauthlib-1.1.1.tar.gz
  md5: 835e04193f04fe9f17b00a68bcdf8563
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # noarch_python: True
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - oauthlib = oauthlib:main
    #
    # Would create an entry point called oauthlib that calls oauthlib.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools

  run:
    - python

test:
  # Python imports
  imports:
    - oauthlib
    - oauthlib.oauth1
    - oauthlib.oauth1.rfc5849
    - oauthlib.oauth1.rfc5849.endpoints
    - oauthlib.oauth2
    - oauthlib.oauth2.rfc6749
    - oauthlib.oauth2.rfc6749.clients
    - oauthlib.oauth2.rfc6749.endpoints
    - oauthlib.oauth2.rfc6749.grant_types

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  requires:
    - blinker
    - cryptography
    - mock
    - nose
    - pyjwt >=1.0.0
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/idan/oauthlib
  license: BSD License
  summary: 'A generic, spec-compliant, thorough implementation of the OAuth request-signing logic'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
